"use strict";
exports.__esModule = true;
exports.recombineNumAsString = exports.parseSizeAsNum = exports.findSizeUnit = exports.expandValues = void 0;
function expandValues(values, lenBreakpoints) {
    if (typeof values === 'string') {
        return Array(lenBreakpoints + 1).fill(values);
    }
    return values;
}
exports.expandValues = expandValues;
function findUnit(values) {
    var units = ['cm', 'mm', 'in', 'pt', 'px', 'em', 'ex', 'rem', 'lh', 'vw', 'vh', 'vmin', 'vmax'];
    for (var i = 0; i < units.length; i++) {
        if (values.endsWith(units[i])) {
            return units[i];
        }
    }
    return 'px';
}
function findSizeUnit(values) {
    if (typeof values === 'string') {
        return findUnit(values);
    }
    var units = [];
    for (var i = 0; i < values.length; i++) {
        units.push(findUnit(values[i]));
    }
    return units;
}
exports.findSizeUnit = findSizeUnit;
function parseStringAsNum(values) {
    return parseInt(values, 10);
}
function parseSizeAsNum(values) {
    if (typeof values === 'string') {
        return parseStringAsNum(values);
    }
    var size = [];
    for (var i = 0; i < values.length; i++) {
        size.push(parseStringAsNum(values[i]));
    }
    return size;
}
exports.parseSizeAsNum = parseSizeAsNum;
function recombineNumAsString(values, units) {
    if (typeof units === 'string' || typeof values === 'number') {
        return '' + values + units;
    }
    var size = [];
    for (var i = 0; i < values.length; i++) {
        size.push('' + values[i] + units[i]);
    }
    return size;
}
exports.recombineNumAsString = recombineNumAsString;
